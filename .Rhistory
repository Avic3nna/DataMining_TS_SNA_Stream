#get all the edges (node-node) of the undirected graph
edgelist = as_edgelist(undir_net, names=T)
#get adjacency matrix
adjacency_matrix = as_adjacency_matrix(
dir_net,
type = c("both", "upper", "lower"),
attr = NULL,
edges = FALSE,
names = TRUE,
sparse = igraph_opt("sparsematrices")
)
lcc_list = lcc(edgelist)
transitivity(undir_net, type = 'local') #lcc confirmation
#check
as.vector(lcc_list) == transitivity(undir_net, type = 'local')
dc = degree_centrality(edgelist)
degree(
undir_net,
v = V(undir_net),
mode ="total",
loops = TRUE,
normalized = FALSE
)/16 #dc confirmation, max degree = 16
#check
dc == degree(
undir_net,
v = V(undir_net),
mode ="total",
loops = TRUE,
normalized = FALSE
)/16
#using the directed net
dp = degree_prestige(links, nodes)
degree(dir_net, mode="in")/16 # dp validation. https://rpubs.com/pjmurphy/313180
#check
dp == degree(dir_net, mode="in")/16
greg = gregariousness(links,nodes)
degree(dir_net, mode="out")/16 #greg validation.https://rpubs.com/pjmurphy/313180
#check
greg == degree(dir_net, mode="out")/16
closeness_centrality = cc(undir_net, edgelist)
cl = closeness(
undir_net,
#vids = V(undir_net),
mode = "total",
weights = NULL,
normalized = FALSE
)
unname(cl) == closeness_centrality
prox_prest = pp(dir_net, nodes)
prox_prest
bc(dir_net)
igraph::betweenness(
dir_net,
v = V(dir_net),
directed = TRUE,
weights = NULL,
nobigint = TRUE,
normalized = FALSE)
#plot(net, edge.arrow.size=.4,vertex.label=NA)
# #remove loops
# #net <- simplify(net, remove.multiple = F, remove.loops = T)
# #plot(net, edge.arrow.size=.4,vertex.label=NA)
#
#
# # #save edge list etc
#
# #
# # adjacency = as_adjacency_matrix(net, attr="weight")
#
#
#
#
# ## As the net is an object, it can be altered like this
#
# # Generate colors based on media type:
#
# colrs <- c("gray50", "tomato", "gold")
#
# V(net)$color <- colrs[V(net)$media.type]
#
#
#
# # Set node size based on audience size:
#
# #V(net)$size <- V(net)$audience.size*0.7
#
#
#
# # The labels are currently node IDs.
#
# # Setting them to NA will render no labels:
#
# V(net)$label.color <- "black"
#
# V(net)$label <- NA
#
#
#
# # Set edge width based on weight:
#
# #E(net)$width <- E(net)$weight/6
#
#
#
# #change arrow size and edge color:
#
# E(net)$arrow.size <- .2
#
# E(net)$edge.color <- "gray80"
#
#
#
# E(net)$width <- 1+E(net)$weight/12
#
# x11()
# plot(net, edge.arrow.size=.4, edge.curved=.1, vertex.label=V(net), vertex.label.color="black")
#
# legend(x=-1.5, y=-1.1, c("Newspaper","Television", "Online News"), pch=21,
#
#        col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
#
undir_net[]
table(dir_net)
table(dir_net[])
table(dir_net[[]])
undir_net[]
dir_net[]
dir_net[['s11']]
dir_net[11]
dir_net[11,]
dir_net[,11]
sum(dir_net[,11] != 0)
V(dir_net)$id
V(dir_net[])$id
V(dir_net)
dir_net
1:(length(V(dir_net)))
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
V(dir_net)
V(dir_net)[1]
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
#check
dp == degree(dir_net, mode="in")/16
#using the directed net
dp = degree_prestige(links, nodes)
#using the directed net
dp = degree_prestige(dir_net)
degree(dir_net, mode="in")/16 # dp validation. https://rpubs.com/pjmurphy/313180
#check
dp == degree(dir_net, mode="in")/16
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
#using the directed net
dp = degree_prestige(dir_net)
degree(dir_net, mode="in")/16 # dp validation. https://rpubs.com/pjmurphy/313180
#check
dp == degree(dir_net, mode="in")/16
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
greg = gregariousness(links,nodes)
greg = gregariousness(dir_net)
greg = gregariousness(dir_net)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
greg = gregariousness(dir_net)
greg = gregariousness(dir_net)
degree(dir_net, mode="out")/16 #greg validation.https://rpubs.com/pjmurphy/313180
#check
greg == degree(dir_net, mode="out")/16
closeness_centrality = cc(undir_net, edgelist)
cl = closeness(
undir_net,
#vids = V(undir_net),
mode = "total",
weights = NULL,
normalized = FALSE
)
unname(cl) == closeness_centrality
prox_prest = pp(dir_net, nodes)
prox_prest
bc(dir_net)
igraph::betweenness(
dir_net,
v = V(dir_net),
directed = TRUE,
weights = NULL,
nobigint = TRUE,
normalized = FALSE)
dc = degree_centrality(edgelist)
#using the directed net
dp = degree_prestige(dir_net)
View(dp)
greg = gregariousness(dir_net)
View(greg)
closeness_centrality = cc(undir_net, edgelist)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
closeness_centrality = cc(undir_net, edgelist)
cl = closeness(
undir_net,
#vids = V(undir_net),
mode = "total",
weights = NULL,
normalized = FALSE
)
cl
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
cl = closeness(
undir_net,
#vids = V(undir_net),
mode = "total",
weights = NULL,
normalized = FALSE
)
cl
?closeness
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
igraph::betweenness(
dir_net,
v = V(dir_net),
directed = TRUE,
weights = NULL,
nobigint = TRUE,
normalized = FALSE)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
bc(dir_net)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
bc(dir_net)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
bc(dir_net)
igraph::betweenness(
dir_net,
v = V(dir_net),
directed = TRUE,
weights = NULL,
nobigint = TRUE,
normalized = FALSE)
igraph::betweenness(
dir_net,
v = V(dir_net),
directed = TRUE,
weights = NULL,
nobigint = FALSE,
normalized = FALSE)
igraph::betweenness(
dir_net,
v = V(dir_net),
directed = TRUE,
weights = NULL,
nobigint = FALSE,
normalized = FALSE)
igraph::betweenness(
dir_net,
v = V(dir_net),
directed = TRUE,
weights = NULL,
nobigint = FALSE,
normalized = TRUE)
0.736/0.004
0.0736/0.004
igraph::betweenness(
dir_net,
v = V(dir_net),
directed = TRUE,
weights = NA,
nobigint = FALSE,
normalized = FALSE)
igraph::betweenness(
dir_net,
v = V(dir_net),
directed = TRUE,
weights = NULL,
nobigint = FALSE,
normalized = FALSE)
debugSource("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
bc(dir_net)
bc(dir_net)
View(sp)
sp = suppressWarnings(all_shortest_paths(net,V(net)[2],V(net)[-2], mode = 'in'))
length(sp)
debugSource("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
igraph::betweenness(
dir_net,
v = V(dir_net),
directed = TRUE,
weights = NULL,
nobigint = FALSE,
normalized = FALSE)
bc(dir_net)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
debugSource("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
bc(dir_net)
sp = suppressWarnings(all_shortest_paths(net,V(net)[2],V(net)[-2], mode = 'in')$res)
sp = suppressWarnings(all_shortest_paths(net,V(dir_net)[2],V(net)[-2], mode = 'in')$res)
sp = suppressWarnings(all_shortest_paths(net,V(dir_net)[2],V(dir_net)[-2], mode = 'in')$res)
sp = suppressWarnings(all_shortest_paths(dir_net,V(dir_net)[2],V(dir_net)[-2], mode = 'in')$res)
sp
sp[1]
sp[2]
length(sp[2])
length(sp[[2]])
sp[[2]]
sp[[2]][1]
length(sp[1])
length(sp[1][])
length(sp[1][[]])
sp
for(x in sp){print(x)}
for(x in sp){print(x[])}
for(x in sp){print(x[[length(x)]])}
for(x in sp){print(x[length(x)])}
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
bc(dir_net)
igraph::betweenness(
dir_net,
v = V(dir_net),
directed = TRUE,
weights = NULL,
nobigint = FALSE,
normalized = FALSE)
4.205557e-04*(16*17)
1/17
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
bc(dir_net)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
bc(dir_net)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
bc(dir_net)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
bc(dir_net)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
bc(dir_net)
igraph::betweenness(
dir_net,
v = V(dir_net),
directed = TRUE,
weights = NULL,
nobigint = FALSE,
normalized = FALSE)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
bc(dir_net)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
bc(dir_net)
debugSource("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
bc(dir_net)
bc(dir_net)
bc(dir_net)
neighbors(undir_net)
neighbors(undir_net, 's01')
V(undir_net)
length(V((undir_net)))
1:(length(V(net))-1)
1:(length(V(undir_net))-1)
neighbors(undir_net, 1)
neighbors(undir_net, 2)
ni = neighbors(undir_net, 1)
nj = neighbors(undir_net, 2)
intersection(ni, nj)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
cn(net)
cn(undir_net)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
cn(undir_net)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
cn(undir_net)
cn(dir_net)
cn(undir_net)
similarity(
undir_net,
vids = V(undir_net),
mode = "total",
loops = FALSE,
method = "dice"
)
similarity(
undir_net,
vids = V(undir_net),
mode = "total",
loops = FALSE,
method = "jaccard"
)
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
similarity(
undir_net,
vids = V(undir_net),
mode = "total",
loops = FALSE,
method = "jaccard"
)
jn(undir_net)
### Exercise 2
#https://kateto.net/networks-r-igraph
rm(list=ls())
set.seed(1337)
packages_used = c("rstudioapi",
"igraph")
for(package in packages_used){
if(package %in% rownames(installed.packages()) == FALSE) {
install.packages(package)
}
}
setwd_current_path = function(){
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path)) #get this current folder
print(getwd())
}
setwd_current_path()
library(igraph)
source('./oen_graphfunctions.R')
#load nodes and links
nodes = read.csv("./Data/netscix2016/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links = read.csv("./Data/netscix2016/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
links = aggregate(links[,3], links[,-3], sum)
links = links[order(links$from, links$to),]
colnames(links)[4] = "weight"
rownames(links) = NULL
#plot the graph
dir_net = graph_from_data_frame(d=links, vertices=nodes, directed=T)
undir_net = graph_from_data_frame(d=links, vertices=nodes, directed=F)
#remove duplicates
undir_net <- simplify(undir_net, remove.multiple = T, remove.loops = T)
dir_net <- simplify(dir_net, remove.multiple = T, remove.loops = T)
x11()
plot(dir_net)
#get all the edges (node-node) of the undirected graph
edgelist = as_edgelist(undir_net, names=T)
#get adjacency matrix
adjacency_matrix = as_adjacency_matrix(
dir_net,
type = c("both", "upper", "lower"),
attr = NULL,
edges = FALSE,
names = TRUE,
sparse = igraph_opt("sparsematrices")
)
lcc_list = lcc(edgelist)
transitivity(undir_net, type = 'local') #lcc confirmation
#check
as.vector(lcc_list) == transitivity(undir_net, type = 'local')
dc = degree_centrality(edgelist)
degree(
undir_net,
v = V(undir_net),
mode ="total",
loops = TRUE,
normalized = FALSE
)/16 #dc confirmation, max degree = 16
#check
dc == degree(
undir_net,
v = V(undir_net),
mode ="total",
loops = TRUE,
normalized = FALSE
)/16
#using the directed net
dp = degree_prestige(dir_net)
degree(dir_net, mode="in")/16 # dp validation. https://rpubs.com/pjmurphy/313180
#check
dp == degree(dir_net, mode="in")/16
greg = gregariousness(dir_net)
degree(dir_net, mode="out")/16 #greg validation.https://rpubs.com/pjmurphy/313180
#check
greg == degree(dir_net, mode="out")/16
closeness_centrality = cc(undir_net, edgelist)
cl = closeness(
undir_net,
#vids = V(undir_net),
mode = "total",
weights = NULL,
normalized = FALSE
)
#check
unname(cl) == closeness_centrality
prox_prest = pp(dir_net, nodes)
prox_prest
#### under construction
bc(dir_net)
igraph::betweenness(
dir_net,
v = V(dir_net),
directed = TRUE,
weights = NULL,
nobigint = FALSE,
normalized = FALSE)
####
cn(undir_net)
similarity(
undir_net,
vids = V(undir_net),
mode = "total",
loops = FALSE,
method = "jaccard"
)
jn(undir_net)
jm(undir_net)
jmm = jm(undir_net)
jm3 = similarity(
undir_net,
vids = V(undir_net),
mode = "total",
loops = FALSE,
method = "jaccard"
)
jmm == jm3
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw3/oen_graphfunctions.R")
