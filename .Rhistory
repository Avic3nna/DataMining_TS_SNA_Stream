#plot the graph
dir_net = graph_from_data_frame(d=links, vertices=nodes, directed=T)
undir_net = graph_from_data_frame(d=links, vertices=nodes, directed=F)
#remove duplicates
undir_net <- simplify(undir_net, remove.multiple = T, remove.loops = T)
x11()
plot(undir_net)
#get all the edges (node-node) of the undirected graph
edgelist = as_edgelist(undir_net, names=T)
lcc_list = lcc(edgelist)
#transitivity(undir_net, type = 'local') #lcc confirmation
dc = degree_centrality(edgelist)
degree(
undir_net,
v = V(undir_net),
mode ="total",
loops = TRUE,
normalized = FALSE
)/16 #dc confirmation, max degree = 16
#using the directed net
dp = degree_prestige(links, nodes)
degree(dir_net, mode="in")/16 # dp validation. https://rpubs.com/pjmurphy/313180
greg = gregariousness(links,nodes)
degree(dir_net, mode="out")/16 #greg validation.https://rpubs.com/pjmurphy/313180
closeness_centrality = cc(undir_net, edgelist)
?vector
### Exercise 2
#https://kateto.net/networks-r-igraph
rm(list=ls())
set.seed(1337)
packages_used = c("rstudioapi",
"igraph")
for(package in packages_used){
if(package %in% rownames(installed.packages()) == FALSE) {
install.packages(package)
}
}
setwd_current_path = function(){
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path)) #get this current folder
print(getwd())
}
setwd_current_path()
library(igraph)
source('./oen_graphfunctions.R')
#load nodes and links
nodes = read.csv("./Data/netscix2016/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links = read.csv("./Data/netscix2016/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
head(nodes)
head(links)
nrow(nodes)
length(unique(nodes$id))
nrow(links)
nrow(unique(links[,c("from", "to")]))
links = aggregate(links[,3], links[,-3], sum)
links = links[order(links$from, links$to),]
colnames(links)[4] = "weight"
rownames(links) = NULL
#plot the graph
dir_net = graph_from_data_frame(d=links, vertices=nodes, directed=T)
undir_net = graph_from_data_frame(d=links, vertices=nodes, directed=F)
#remove duplicates
undir_net <- simplify(undir_net, remove.multiple = T, remove.loops = T)
x11()
plot(undir_net)
#get all the edges (node-node) of the undirected graph
edgelist = as_edgelist(undir_net, names=T)
lcc_list = lcc(edgelist)
#transitivity(undir_net, type = 'local') #lcc confirmation
dc = degree_centrality(edgelist)
degree(
undir_net,
v = V(undir_net),
mode ="total",
loops = TRUE,
normalized = FALSE
)/16 #dc confirmation, max degree = 16
#using the directed net
dp = degree_prestige(links, nodes)
degree(dir_net, mode="in")/16 # dp validation. https://rpubs.com/pjmurphy/313180
greg = gregariousness(links,nodes)
degree(dir_net, mode="out")/16 #greg validation.https://rpubs.com/pjmurphy/313180
closeness_centrality = cc(undir_net, edgelist)
### Exercise 2
#https://kateto.net/networks-r-igraph
rm(list=ls())
set.seed(1337)
packages_used = c("rstudioapi",
"igraph")
for(package in packages_used){
if(package %in% rownames(installed.packages()) == FALSE) {
install.packages(package)
}
}
setwd_current_path = function(){
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path)) #get this current folder
print(getwd())
}
setwd_current_path()
library(igraph)
source('./oen_graphfunctions.R')
#load nodes and links
nodes = read.csv("./Data/netscix2016/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links = read.csv("./Data/netscix2016/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
head(nodes)
head(links)
nrow(nodes)
length(unique(nodes$id))
nrow(links)
nrow(unique(links[,c("from", "to")]))
links = aggregate(links[,3], links[,-3], sum)
links = links[order(links$from, links$to),]
colnames(links)[4] = "weight"
rownames(links) = NULL
#plot the graph
dir_net = graph_from_data_frame(d=links, vertices=nodes, directed=T)
undir_net = graph_from_data_frame(d=links, vertices=nodes, directed=F)
#remove duplicates
undir_net <- simplify(undir_net, remove.multiple = T, remove.loops = T)
x11()
plot(undir_net)
#get all the edges (node-node) of the undirected graph
edgelist = as_edgelist(undir_net, names=T)
lcc_list = lcc(edgelist)
#transitivity(undir_net, type = 'local') #lcc confirmation
dc = degree_centrality(edgelist)
degree(
undir_net,
v = V(undir_net),
mode ="total",
loops = TRUE,
normalized = FALSE
)/16 #dc confirmation, max degree = 16
#using the directed net
dp = degree_prestige(links, nodes)
degree(dir_net, mode="in")/16 # dp validation. https://rpubs.com/pjmurphy/313180
greg = gregariousness(links,nodes)
degree(dir_net, mode="out")/16 #greg validation.https://rpubs.com/pjmurphy/313180
closeness_centrality = cc(undir_net, edgelist)
V(undir_net)
V(undir_net)$weight
V(undir_net)$weights
E(net)$weight
E(undir_net)$weight
### Exercise 2
#https://kateto.net/networks-r-igraph
rm(list=ls())
set.seed(1337)
packages_used = c("rstudioapi",
"igraph")
for(package in packages_used){
if(package %in% rownames(installed.packages()) == FALSE) {
install.packages(package)
}
}
setwd_current_path = function(){
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path)) #get this current folder
print(getwd())
}
setwd_current_path()
library(igraph)
source('./oen_graphfunctions.R')
#load nodes and links
nodes = read.csv("./Data/netscix2016/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links = read.csv("./Data/netscix2016/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
head(nodes)
head(links)
nrow(nodes)
length(unique(nodes$id))
nrow(links)
nrow(unique(links[,c("from", "to")]))
links = aggregate(links[,3], links[,-3], sum)
links = links[order(links$from, links$to),]
colnames(links)[4] = "weight"
rownames(links) = NULL
#plot the graph
dir_net = graph_from_data_frame(d=links, vertices=nodes, directed=T)
undir_net = graph_from_data_frame(d=links, vertices=nodes, directed=F)
#remove duplicates
undir_net <- simplify(undir_net, remove.multiple = T, remove.loops = T)
x11()
plot(undir_net)
#get all the edges (node-node) of the undirected graph
edgelist = as_edgelist(undir_net, names=T)
lcc_list = lcc(edgelist)
#transitivity(undir_net, type = 'local') #lcc confirmation
dc = degree_centrality(edgelist)
degree(
undir_net,
v = V(undir_net),
mode ="total",
loops = TRUE,
normalized = FALSE
)/16 #dc confirmation, max degree = 16
#using the directed net
dp = degree_prestige(links, nodes)
degree(dir_net, mode="in")/16 # dp validation. https://rpubs.com/pjmurphy/313180
greg = gregariousness(links,nodes)
degree(dir_net, mode="out")/16 #greg validation.https://rpubs.com/pjmurphy/313180
closeness_centrality = cc(undir_net, edgelist)
### Exercise 2
#https://kateto.net/networks-r-igraph
rm(list=ls())
set.seed(1337)
packages_used = c("rstudioapi",
"igraph")
for(package in packages_used){
if(package %in% rownames(installed.packages()) == FALSE) {
install.packages(package)
}
}
setwd_current_path = function(){
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path)) #get this current folder
print(getwd())
}
setwd_current_path()
library(igraph)
source('./oen_graphfunctions.R')
#load nodes and links
nodes = read.csv("./Data/netscix2016/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links = read.csv("./Data/netscix2016/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
head(nodes)
head(links)
nrow(nodes)
length(unique(nodes$id))
nrow(links)
nrow(unique(links[,c("from", "to")]))
links = aggregate(links[,3], links[,-3], sum)
links = links[order(links$from, links$to),]
colnames(links)[4] = "weight"
rownames(links) = NULL
#plot the graph
dir_net = graph_from_data_frame(d=links, vertices=nodes, directed=T)
undir_net = graph_from_data_frame(d=links, vertices=nodes, directed=F)
#remove duplicates
undir_net <- simplify(undir_net, remove.multiple = T, remove.loops = T)
x11()
plot(undir_net)
#get all the edges (node-node) of the undirected graph
edgelist = as_edgelist(undir_net, names=T)
lcc_list = lcc(edgelist)
#transitivity(undir_net, type = 'local') #lcc confirmation
dc = degree_centrality(edgelist)
degree(
undir_net,
v = V(undir_net),
mode ="total",
loops = TRUE,
normalized = FALSE
)/16 #dc confirmation, max degree = 16
#using the directed net
dp = degree_prestige(links, nodes)
degree(dir_net, mode="in")/16 # dp validation. https://rpubs.com/pjmurphy/313180
greg = gregariousness(links,nodes)
degree(dir_net, mode="out")/16 #greg validation.https://rpubs.com/pjmurphy/313180
closeness_centrality = cc(undir_net, edgelist)
### Exercise 2
#https://kateto.net/networks-r-igraph
rm(list=ls())
set.seed(1337)
packages_used = c("rstudioapi",
"igraph")
for(package in packages_used){
if(package %in% rownames(installed.packages()) == FALSE) {
install.packages(package)
}
}
setwd_current_path = function(){
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path)) #get this current folder
print(getwd())
}
setwd_current_path()
library(igraph)
source('./oen_graphfunctions.R')
#load nodes and links
nodes = read.csv("./Data/netscix2016/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links = read.csv("./Data/netscix2016/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
head(nodes)
head(links)
nrow(nodes)
length(unique(nodes$id))
nrow(links)
nrow(unique(links[,c("from", "to")]))
links = aggregate(links[,3], links[,-3], sum)
links = links[order(links$from, links$to),]
colnames(links)[4] = "weight"
rownames(links) = NULL
#plot the graph
dir_net = graph_from_data_frame(d=links, vertices=nodes, directed=T)
undir_net = graph_from_data_frame(d=links, vertices=nodes, directed=F)
#remove duplicates
undir_net <- simplify(undir_net, remove.multiple = T, remove.loops = T)
x11()
plot(undir_net)
#get all the edges (node-node) of the undirected graph
edgelist = as_edgelist(undir_net, names=T)
lcc_list = lcc(edgelist)
#transitivity(undir_net, type = 'local') #lcc confirmation
dc = degree_centrality(edgelist)
degree(
undir_net,
v = V(undir_net),
mode ="total",
loops = TRUE,
normalized = FALSE
)/16 #dc confirmation, max degree = 16
#using the directed net
dp = degree_prestige(links, nodes)
degree(dir_net, mode="in")/16 # dp validation. https://rpubs.com/pjmurphy/313180
greg = gregariousness(links,nodes)
degree(dir_net, mode="out")/16 #greg validation.https://rpubs.com/pjmurphy/313180
closeness_centrality = cc(undir_net, edgelist)
### Exercise 2
#https://kateto.net/networks-r-igraph
rm(list=ls())
set.seed(1337)
packages_used = c("rstudioapi",
"igraph")
for(package in packages_used){
if(package %in% rownames(installed.packages()) == FALSE) {
install.packages(package)
}
}
setwd_current_path = function(){
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path)) #get this current folder
print(getwd())
}
setwd_current_path()
library(igraph)
source('./oen_graphfunctions.R')
#load nodes and links
nodes = read.csv("./Data/netscix2016/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links = read.csv("./Data/netscix2016/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
head(nodes)
head(links)
nrow(nodes)
length(unique(nodes$id))
nrow(links)
nrow(unique(links[,c("from", "to")]))
links = aggregate(links[,3], links[,-3], sum)
links = links[order(links$from, links$to),]
colnames(links)[4] = "weight"
rownames(links) = NULL
#plot the graph
dir_net = graph_from_data_frame(d=links, vertices=nodes, directed=T)
undir_net = graph_from_data_frame(d=links, vertices=nodes, directed=F)
#remove duplicates
undir_net <- simplify(undir_net, remove.multiple = T, remove.loops = T)
x11()
plot(undir_net)
#get all the edges (node-node) of the undirected graph
edgelist = as_edgelist(undir_net, names=T)
lcc_list = lcc(edgelist)
#transitivity(undir_net, type = 'local') #lcc confirmation
dc = degree_centrality(edgelist)
degree(
undir_net,
v = V(undir_net),
mode ="total",
loops = TRUE,
normalized = FALSE
)/16 #dc confirmation, max degree = 16
#using the directed net
dp = degree_prestige(links, nodes)
degree(dir_net, mode="in")/16 # dp validation. https://rpubs.com/pjmurphy/313180
greg = gregariousness(links,nodes)
degree(dir_net, mode="out")/16 #greg validation.https://rpubs.com/pjmurphy/313180
closeness_centrality = cc(undir_net, edgelist)
find_shortest_path(undir_net, "s07", "s14")
warnings()
find_shortest_path(dir_net, "s07", "s14")
find_shortest_path(dir_net, "s07", "s14")
find_shortest_path(undir_net, "s07", "s14")
shortest_paths(
undir_net,
"s07",
"s14"
)
undir_net["s01"]
for(node in undir_net[['s01']]){print(node)}
for(node in undir_net[['s01']]){print(node); print('')}
### Exercise 2
#https://kateto.net/networks-r-igraph
rm(list=ls())
set.seed(1337)
packages_used = c("rstudioapi",
"igraph")
for(package in packages_used){
if(package %in% rownames(installed.packages()) == FALSE) {
install.packages(package)
}
}
setwd_current_path = function(){
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path)) #get this current folder
print(getwd())
}
setwd_current_path()
library(igraph)
source('./oen_graphfunctions.R')
#load nodes and links
nodes = read.csv("./Data/netscix2016/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links = read.csv("./Data/netscix2016/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
head(nodes)
head(links)
nrow(nodes)
length(unique(nodes$id))
nrow(links)
nrow(unique(links[,c("from", "to")]))
links = aggregate(links[,3], links[,-3], sum)
links = links[order(links$from, links$to),]
colnames(links)[4] = "weight"
rownames(links) = NULL
#plot the graph
dir_net = graph_from_data_frame(d=links, vertices=nodes, directed=T)
undir_net = graph_from_data_frame(d=links, vertices=nodes, directed=F)
#remove duplicates
undir_net <- simplify(undir_net, remove.multiple = T, remove.loops = T)
x11()
plot(undir_net)
#get all the edges (node-node) of the undirected graph
edgelist = as_edgelist(undir_net, names=T)
lcc_list = lcc(edgelist)
#transitivity(undir_net, type = 'local') #lcc confirmation
dc = degree_centrality(edgelist)
degree(
undir_net,
v = V(undir_net),
mode ="total",
loops = TRUE,
normalized = FALSE
)/16 #dc confirmation, max degree = 16
#using the directed net
dp = degree_prestige(links, nodes)
degree(dir_net, mode="in")/16 # dp validation. https://rpubs.com/pjmurphy/313180
greg = gregariousness(links,nodes)
degree(dir_net, mode="out")/16 #greg validation.https://rpubs.com/pjmurphy/313180
closeness_centrality = cc(undir_net, edgelist)
find_shortest_path(undir_net, "s07", "s14")
find_shortest_path(undir_net, "s07", "s14")
find_shortest_path(undir_net, "s07", "s14")
### Exercise 2
#https://kateto.net/networks-r-igraph
rm(list=ls())
set.seed(1337)
packages_used = c("rstudioapi",
"igraph")
for(package in packages_used){
if(package %in% rownames(installed.packages()) == FALSE) {
install.packages(package)
}
}
setwd_current_path = function(){
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path)) #get this current folder
print(getwd())
}
setwd_current_path()
library(igraph)
source('./oen_graphfunctions.R')
#load nodes and links
nodes = read.csv("./Data/netscix2016/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links = read.csv("./Data/netscix2016/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
head(nodes)
head(links)
nrow(nodes)
length(unique(nodes$id))
nrow(links)
nrow(unique(links[,c("from", "to")]))
links = aggregate(links[,3], links[,-3], sum)
links = links[order(links$from, links$to),]
colnames(links)[4] = "weight"
rownames(links) = NULL
#plot the graph
dir_net = graph_from_data_frame(d=links, vertices=nodes, directed=T)
undir_net = graph_from_data_frame(d=links, vertices=nodes, directed=F)
#remove duplicates
undir_net <- simplify(undir_net, remove.multiple = T, remove.loops = T)
x11()
plot(undir_net)
#get all the edges (node-node) of the undirected graph
edgelist = as_edgelist(undir_net, names=T)
lcc_list = lcc(edgelist)
#transitivity(undir_net, type = 'local') #lcc confirmation
dc = degree_centrality(edgelist)
degree(
undir_net,
v = V(undir_net),
mode ="total",
loops = TRUE,
normalized = FALSE
)/16 #dc confirmation, max degree = 16
#using the directed net
dp = degree_prestige(links, nodes)
degree(dir_net, mode="in")/16 # dp validation. https://rpubs.com/pjmurphy/313180
greg = gregariousness(links,nodes)
degree(dir_net, mode="out")/16 #greg validation.https://rpubs.com/pjmurphy/313180
#closeness_centrality = cc(undir_net, edgelist)
find_shortest_path(undir_net, "s07", "s14")
